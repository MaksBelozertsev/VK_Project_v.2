import subprocess
import sys
import time
from pathlib import Path
from datetime import datetime
import os
import locale


def setup_console_encoding():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤"""
    try:
        # –î–ª—è Windows
        if sys.platform == "win32":
            import win32api
            win32api.SetConsoleOutputCP(65001)  # UTF-8
            os.environ["PYTHONIOENCODING"] = "utf-8"

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ UTF-8 –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        if sys.version_info >= (3, 7):
            sys.stdout.reconfigure(encoding='utf-8', errors='replace')
            sys.stderr.reconfigure(encoding='utf-8', errors='replace')
        else:
            import io
            sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
            sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

        locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
    except Exception as e:
        print(f"Warning: Could not set console encoding: {str(e)}")


def log_message(message, log_file):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Unicode"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        safe_message = message.encode('utf-8', errors='replace').decode('utf-8')
    except (UnicodeEncodeError, UnicodeDecodeError):
        safe_message = message.encode('ascii', errors='replace').decode('ascii')

    full_message = f"[{timestamp}] {safe_message}"

    try:
        print(full_message)
    except UnicodeEncodeError:
        print(full_message.encode('ascii', errors='replace').decode('ascii'))

    try:
        with open(log_file, 'a', encoding='utf-8', errors='replace') as f:
            f.write(full_message + "\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {str(e)}")


def run_script(script_path, action_name, log_file):
    """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–æ–∫"""
    log_message(f"[–£—Å—Ç–∞–Ω–æ–≤–∫–∞] {action_name}...", log_file)
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å UTF-8
        env = os.environ.copy()
        env["PYTHONIOENCODING"] = "utf-8"

        result = subprocess.run(
            [sys.executable, str(script_path)],
            check=False,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            encoding='utf-8',
            errors='replace',
            env=env,
            text=True
        )

        # –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞
        output = f"{result.stdout or ''}\n{result.stderr or ''}".strip()
        clean_output = output.encode('utf-8', errors='replace').decode('utf-8')

        log_message(f"–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥:\n{clean_output}", log_file)

        if "test" in action_name.lower():
            return True, clean_output

        if result.returncode != 0:
            log_message(f"[–û—à–∏–±–∫–∞] {action_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}", log_file)
            return False, clean_output

        log_message(f"[–£—Å–ø–µ—Ö] {action_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ", log_file)
        return True, clean_output

    except Exception as e:
        error_msg = str(e).encode('utf-8', errors='replace').decode('utf-8')
        log_message(f"[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞] –ü—Ä–∏ {action_name.lower()}: {error_msg}", log_file)
        return False, error_msg


def main():
    setup_console_encoding()

    base_dir = Path("C:\\Users\\beloz\\PycharmProjects\\VK_project_v.2")
    install_script = base_dir / "run_install.py"
    report_script = base_dir / "run_test_report.py"
    uninstall_script = base_dir / "run_uninstall.py"

    log_dir = base_dir / "logs"
    log_dir.mkdir(exist_ok=True)
    log_file = log_dir / f"test_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"

    install_success, _ = run_script(install_script, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", log_file)
    if not install_success:
        log_message("‚ùå –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å", log_file)
        sys.exit(1)

    log_message("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ—Ç—á–µ—Ç–∞...", log_file)
    time.sleep(60)

    report_success, report_output = run_script(report_script, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞", log_file)
    if report_success:
        log_message("üìä –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", log_file)
        log_message(f"–í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç—á–µ—Ç–∞:\n{report_output}", log_file)
    else:
        log_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", log_file)

    log_message("üßπ –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", log_file)
    uninstall_success, _ = run_script(uninstall_script, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", log_file)

    log_message("\n=== FINAL REPORT ===", log_file)
    log_message(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if install_success else '‚ùå –û—à–∏–±–∫–∞'}", log_file)
    log_message(f"–û—Ç—á–µ—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if report_success else '‚ùå –û—à–∏–±–∫–∞'}", log_file)
    log_message(f"–£–¥–∞–ª–µ–Ω–∏–µ: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if uninstall_success else '‚ùå –û—à–∏–±–∫–∞'}", log_file)

    if install_success and report_success and uninstall_success:
        log_message("üéâ –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û", log_file)
        sys.exit(0)
    else:
        log_message("üî• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´", log_file)
        sys.exit(1)


if __name__ == "__main__":
    main()